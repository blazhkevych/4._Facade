/*
								Façade
	Спроектируйте с помощью паттерна Façade программу, которая симулирует
загрузку компьютера со всеми его устройствами.
	В компьютере, который необходимо описать, будут следующие основные узлы.
	1. Видеокарта									1. Video card
	2. Оперативная память							2. RAM
	3. Винчестер									3. HDD
	4. Устройство чтения оптических дисков			4. Optical disc reader
	5. Блок питания									5. Power supply
	6. Датчики										6. Sensors
	Для работы с каждым устройством требуется отдельный класс. При этом
методы из этих классов будут выполнять некоторую работу (вывод в консольное
окно строки о выполненном действии). Для более удобного использования этой
системы необходимо реализовать класс Façade, который будет позволять
вызовом только одного метода BeginWork запускать всю систему.
	Действия, необходимые для правильной загрузки.
	1. Блок питания: подать питание.										  1. Power supply: apply power.
	2. Датчики: проверить напряжение.										  2. Sensors: check the voltage.
	3. Датчики: проверить температуру в блоке питания.						  3. Sensors: check the temperature in the power supply.
	4. Датчики: проверить температуру в видеокарте.							  4. Sensors: check the temperature in the video card.
	5. Блок питания: подать питание на видеокарту.							  5. Power supply: supply power to the video card.
	6. Видеокарта: запуск.													  6. Video card: start.
	7. Видеокарта: проверка связи с монитором.								  7. Video card: Checking the connection with the monitor.
	8. Датчики: проверить температуру в оперативной памяти.					  8. Sensors: check the temperature in the RAM.
	9. Блок питания: подать питание на оперативную память.					  9. Power supply: supply power to the RAM.
	10.Оперативная память: запуск устройств.								  10.RAM: launch devices.
	11.Оперативная память: анализ памяти.									  11.Random access memory: memory analysis.
	12.Видеокарта: вывод данных об оперативной памяти.						  12.Video card: output data about RAM.
	13.Блок питания: подать питание на устройство чтения дисков.			  13.Power supply: supply power to the disc reader.
	14.Устройство чтения оптических дисков: запуск.							  14.Optical disc reader: start.
	15.Устройство чтения оптических дисков: проверка наличия диска.			  15.Optical Disc Reader: Checks if a disc is present.
	16.Видеокарта: вывод информации об устройстве чтения дисков.			  16.Video card: display information about the disc reader.
	17.Блок питания: подать питание на винчестер.							  17. Power supply: supply power to the hard drive.
	18.Винчестер: запуск.													  18. Winchester: launch.
	19.Винчестер: проверка загрузочного сектора.							  19. Winchester: checking the boot sector.
	20.Видеокарта: вывод данных о винчестере.								  20.Video card: displaying data about the hard drive.
	21.Датчики: проверить температуру всех систем.							  21. Sensors: check the temperature of all systems.
	Подразумевается, что ход загрузки не должен быть нарушен, но для
реалистичности можно добавить в внутрь каждой функции логику случайной
генерации положительного и отрицательного варианта выполнения.
	Дополните класс управления компьютером функциональностью для
выключения компьютера.
	1. Винчестер: остановка устройства.
	2. Оперативная память: очистка памяти.
	3. Оперативная память: анализ памяти.
	4. Видео карта: вывести на монитор данные прощальное сообщение.
	5. Устройство чтения дисков: вернуть в исходную позицию.
	6. Блок питания: прекратить питание видео карты.
	7. Блок питания: прекратить питание оперативной памяти.
	8. Блок питания: прекратить питание устройства чтения дисков.
	9. Блок питания: прекратить питание винчестера.
	10.Датчики проверить напряжение.
	11.Блок питания: выключение.
	Необходимо выводить на экран только информацию о том, что было
выполнено то или иное действие (без данных).
В классе, отвечающем за управление компьютером, должно быть два
открытых метода для включения и выключения компьютера.
*/

/*
 * Фасад предоставл¤ет унифицированный интерфейс вместо набора интерфейсов некоторой подсистемы.
 * Фасад определ¤ет интерфейс более высокого уровн¤, который упрощает использование подсистемы.
 * Разбиение на подсистемы облегчает проектирование сложной системы в целом.
 * Общая цель всякого проектирования - свести к минимуму зависимость подсистем друг от друга и обмен информацией между ними.
 * Один из способов решения этой задачи - введение объекта фасад, предоставл¤ющий единый упрощенный интерфейс к более сложным системным средствам.
 *
 */

#include <Windows.h>

#include "Facade.h"
#include "HDD.h"
#include "OpticalDiscReader.h"
#include "PowerSupply.h"
#include "RAM.h"
#include "Sensors.h"
#include "VideoCard.h"

int main()
{
	SetConsoleCP(1251);
	/*
	Задает кодовую страницу ввода, используемую консолью, связанной с вызывающим процессом.
	Консоль использует страницу входного кода для преобразования ввода с клавиатуры
	в соответствующее символьное значение.
	*/
	SetConsoleOutputCP(1251);
	/*
	Задает выходную кодовую страницу, используемую консолью, связанной с вызывающим процессом.
	Консоль использует свою кодовую страницу вывода для преобразования символьных значений,
	записанных различными функциями вывода, в изображения, отображаемые в окне консоли.
	*/

	VideoCard videocard;
	RAM ram;
	HDD hdd;
	OpticalDiscReader opticaldiscreader;
	PowerSupply powersupply;
	Sensors sensors;

	Facade facade(videocard, ram, hdd, opticaldiscreader, powersupply, sensors);
	facade.BeginWork();
	facade.StopWork();
}